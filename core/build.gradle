/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ykyang' at '11/8/16 4:19 PM' with Gradle 3.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: "application"

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

//mainClassName = "org.allnix.core.MainDisplay"
mainClassName = "org.allnix.rmi.MessengerServiceImpl"

def os = System.properties['os.name'].toLowerCase();

jar {
    manifest {
        attributes("Manifest-Version": "1.0",
                   "Main-Class": "org.allnix.core.MainDisplay",
                   "SplashScreen-Image": "splash.gif"
        )
    }
}

applicationDefaultJvmArgs = ["-splash:splash.gif"]

task wrapper(type: Wrapper) {
    gradleVersion = '4.8.1'
}

// In this section you declare where to find the dependencies of your project
repositories {
  // Use 'jcenter' for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  jcenter()
  //mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
  // The production code uses the SLF4J logging API at compile time
  compile 'org.slf4j:slf4j-api:1.7.13'
  compile 'ch.qos.logback:logback-classic:1.1.2'
  // JSON
  compile 'com.fasterxml.jackson.core:jackson-core:2.7.3'
  compile 'com.fasterxml.jackson.core:jackson-annotations:2.7.3'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.7.3'
    
  // Apache
  compile group: 'commons-io', name: 'commons-io', version: '2.5'
  // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
  compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'

  // > Command line argument parsing library
  // https://mvnrepository.com/artifact/com.beust/jcommander
  compile group: 'com.beust', name: 'jcommander', version: '1.64'
  
    

  // Use TestNG framework, also requires calling test.useTestNG() below
  // https://mvnrepository.com/artifact/org.testng/testng
  testCompile group: 'org.testng', name: 'testng', version: '6.11'
  // testCompile 'org.testng:testng:6.9.11'
    
  // https://mvnrepository.com/artifact/org.python/jython
  //testCompile group: 'org.python', name: 'jython', version: '2.7.0'
  // https://mvnrepository.com/artifact/org.python/jython-standalone
  testCompile group: 'org.python', name: 'jython-standalone', version: '2.7.0'

  // bug in 6.9.12 in DataProvider
  //testCompile 'org.testng:testng:6.9.12'
}

test {
  // Run the test
  // ./gradlew test
  
  // Force re-run the test
  // ./gradlew cleanTest test
  
  systemProperties 'logback.configurationFile' : new File(projectDir,'src/test/resources/logback-test.xml').absolutePath
  // Tem disabled  
  include '**/Test*.*'
  //include '**/DisableAllTest*.*'
  
  // Use "gradlew cleanTest test" to force running test
  testLogging {
    events "started", "passed", "skipped", "failed", "standardOut", "standardError"
  }

  useTestNG() {
    setParallel("methods");
    setThreadCount(4);
    
    excludeGroups 'void', 'gui'
    
    if (os.contains("linux")) {
//      includeGroups 'unix'
      excludeGroups 'win'
    }
    if (os.contains("windows")) {
      includeGroups 'win'
    }
    //    if (os.contains("windows")) {
    //      excludeGroups 'linux'
    //    }
    //    if(os.contains("linux")) {
    //      excludeGroups 'win'
    //    }
  }
  
  task guiTest (type:Test) {
    systemProperties 'logback.configurationFile' : new File(projectDir,'src/test/resources/logback-test.xml').absolutePath
    include '**/Gui*.*'
  
    // Use "gradlew cleanTest test" to force running test
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    
    useTestNG() {
      excludeGroups 'void'
      
      if (os.contains("linux")) {
        excludeGroups 'win'
//        includeGroups 'unix'
      }
      if (os.contains("windows")) {
        excludeGroups 'unix'
//        includeGroups 'win'
      }
    }
  }
  
  task displayMain(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.allnix.core.MainDisplay'
  }
 
 // ./gradlew -PmainClass=com.wdvglab.vtk.JFrameRenderer runApp
task runApp(type:JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = project.hasProperty("mainClass") ? project.getProperty("mainClass") :
 "org.allnix.vtk.JFrameRenderer"
}
 
  
}