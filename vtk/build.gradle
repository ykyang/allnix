/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'application'
}

//mainClassName = "vtk.SimpleVTK"
mainClassName = "org.allnix.vtk.JFrameRenderer"
//mainClassName = "vtk.AwtConeRendering"

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:26.0-jre'
    implementation 'org.slf4j:slf4j-api:1.7.13'
  	implementation 'ch.qos.logback:logback-classic:1.1.2'
    implementation files('/home/ykyang/local/vtk-8.1.2/lib/vtk.jar')

	// https://mvnrepository.com/artifact/com.miglayout/miglayout
	implementation 'com.miglayout:miglayout:3.7.4'
	
	
	// Copied from https://stackoverflow.com/questions/11235614/how-to-detect-the-current-os-from-gradle
	if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
		implementation files('/home/ykyang/local/vtk-8.1.2/lib/vtk.jar')
	} else if (org.gradle.internal.os.OperatingSystem.current().isUnix()) {
    // consider UNIX.
	} else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
		implementation files('C:/Program Files/VTK-8.1.2/lib/vtk.jar')
    // consider Windows.
	} else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    // consider OSX.
	} else {
    // unknown OS.
	}

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}
// ./gradlew -PmainClass=org.allnix.vtk.JFrameRenderer runApp
task runApp(type:JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "org.allnix.vtk.JFrameRenderer"
}