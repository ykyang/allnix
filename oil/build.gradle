/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.7/userguide/java_library_plugin.html
 *
 * Run both TestNG and JUnit5 in one command
 *
 *   ./gradlew clean testng junit5 --tests "*ProjectServiceTest"
 */

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: "application"

mainClassName='org.allnix.oil.lab.Application'

buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'org.allnix'
version = '0.0.1-SNAPSHOT'
compileJava {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    //mavenCentral()
    //maven { url "https://repo.spring.io/snapshot" }
	//maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:23.0'

	compile 'org.slf4j:slf4j-api'
  	compile 'ch.qos.logback:logback-classic'
  	
  	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-logging'
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb'

	// - H2 - //
    compile("com.h2database:h2")

	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	// compileOnly('org.projectlombok:lombok:1.16.20')

    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.2")
    testCompile("org.junit.platform:junit-platform-runner:1.0.2")
    testCompile 'org.apiguardian:apiguardian-api:1.0.0'
    
    testCompile 'org.testng:testng:6.13'
    
    testCompile('org.springframework.boot:spring-boot-starter-test')
    
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.2")
}


task testng (type:Test) {
	useTestNG() {
	  	includeGroups 'all', 'seconds', 'milliseconds' //, 'manual' 
	}
	
    systemProperties 'logging.config' : new File(projectDir,'src/test/resources/logback-test.xml').absolutePath

    // Use "gradlew cleanTest test" to force running test
    testLogging {
        events "started", "passed", "skipped", "failed"//, "standardOut" //, "standardError"
    }	
}

task junit5 (type:Test) {
	useJUnitPlatform {
        // see JUnitPlatformOptions
        //excludeTags 'seconds', 'minutes', 'hours', 'days'
   	
     	includeTags 'minutes', 'seconds', 'milliseconds' //, 'manual'
        //includeTags 'fast'
  	}
	
    systemProperties 'logging.config' : new File(projectDir,'src/test/resources/logback-test.xml').absolutePath

    // Use "gradlew cleanTest test" to force running test
    testLogging {
        events "started", "passed", "skipped", "failed"//, "standardOut" //, "standardError"
    }	
}

test {
  // See https://docs.gradle.org/current/userguide/java_plugin.html
	//dependsOn testng
	useJUnitPlatform {
        // see JUnitPlatformOptions
        //excludeTags 'seconds', 'minutes', 'hours', 'days'
   	
     	includeTags 'minutes', 'seconds', 'milliseconds' //, 'manual'
        //includeTags 'fast'
  	}	
	/*
  useJUnitPlatform {
    // see JUnitPlatformOptions
    //excludeTags 'seconds', 'minutes', 'hours', 'days'
   	
   	includeTags 'minutes', 'seconds', 'milliseconds' //, 'manual'
    //includeTags 'fast'
  }
	*/
  
  
  
  
  
  maxParallelForks = 1
  //systemProperties 'logback.configurationFile' : new File(projectDir,'src/test/resources/logback-test.xml').absolutePath
  systemProperties 'logging.config' : new File(projectDir,'src/test/resources/logback-test.xml').absolutePath
//  include '**/**'
  //include '**/DisableAllTest*.*'

  // Use "gradlew cleanTest test" to force running test
  testLogging {
    events "started", "passed", "skipped", "failed"//, "standardOut" //, "standardError"
  }
}