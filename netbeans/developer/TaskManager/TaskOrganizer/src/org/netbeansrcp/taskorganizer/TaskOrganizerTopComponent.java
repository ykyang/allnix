/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeansrcp.taskorganizer;

import java.awt.Font;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.action.ActionFactory;
import org.netbeans.api.visual.widget.LabelWidget;
import org.netbeans.api.visual.widget.LayerWidget;
import org.netbeans.api.visual.widget.Scene;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
  dtd = "-//org.netbeansrcp.taskorganizer//TaskOrganizer//EN",
  autostore = false
)
@TopComponent.Description(
  preferredID = "TaskOrganizerTopComponent",
  //iconBase="SET/PATH/TO/ICON/HERE", 
  persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.netbeansrcp.taskorganizer.TaskOrganizerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
  displayName = "#CTL_TaskOrganizerAction",
  preferredID = "TaskOrganizerTopComponent"
)
@Messages({
  "CTL_TaskOrganizerAction=TaskOrganizer",
  "CTL_TaskOrganizerTopComponent=TaskOrganizer Window",
  "HINT_TaskOrganizerTopComponent=This is a TaskOrganizer window"
})
public final class TaskOrganizerTopComponent extends TopComponent {

  public TaskOrganizerTopComponent() {
    initComponents();
    setName(Bundle.CTL_TaskOrganizerTopComponent());
    setToolTipText(Bundle.HINT_TaskOrganizerTopComponent());
    
//    Scene scene = new Scene();
//    LayerWidget lw = new LayerWidget(scene);
//    scene.addChild(lw);
//    
//    LabelWidget labelWidget = new LabelWidget(scene, "hello world");
//    labelWidget.setFont(new Font("Helvetica", Font.BOLD + Font.ITALIC, 16));
//    labelWidget.getActions().addAction(ActionFactory.createMoveAction());
//    lw.addChild(labelWidget);
//    jScrollPane1.setViewportView(scene.createView());

    Scene scene = new TaskScene();
    jScrollPane1.setViewportView(scene.createView());

  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }
}
