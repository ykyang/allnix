/*
 * Copyright 2017 Yi-Kun Yang.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netbeansrcp.taskeditor;

import com.netbeansrcp.taskmodel.api.Task;
import com.netbeansrcp.taskmodel.api.TaskManager;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.Lookup;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Yi-Kun Yang &lt;ykyang at gmail.com&gt;
 */
public class TaskEditorPanel extends javax.swing.JPanel {
  static final Logger logger = LoggerFactory.getLogger(TaskEditorPanel.class);
  
  public static final String PROP_TASK = "TASK";
  private TaskManager taskManager;
  public Task task; // = new TaskImpl();
  private boolean noUpdate = false;
  private PropertyChangeSupport pcs;

  /**
   * Creates new form TaskEditorPanel
   */
  public TaskEditorPanel() {
    logger.info("TaskEditorPanel");
//    // > Why would this ever be not NULL?
//    if (taskManager == null) {
    taskManager = Lookup.getDefault().lookup(TaskManager.class);
//    }
//    
//    if (taskManager != null) {
//      task = taskManager.createTask();
//    }
    initComponents();
    pcs = new PropertyChangeSupport(this);
//    updateForm();
  }

  @Override
  public synchronized void addPropertyChangeListener(PropertyChangeListener listener) {
    if (pcs == null) {
      pcs = new PropertyChangeSupport(this);
    }
    
    pcs.addPropertyChangeListener(listener);
  }
  
  public synchronized void removePropertyChangeListener(PropertyChangeListener listener) {
    if ( pcs != null) {
      pcs.removePropertyChangeListener(listener);
    }
  }
  private DocumentListener docListener = new DocumentListener() {
    @Override
    public void insertUpdate(DocumentEvent evt) {
      TaskEditorPanel.this.updateTask();
    }

    @Override
    public void removeUpdate(DocumentEvent evt) {
      TaskEditorPanel.this.updateTask();
    }

    @Override
    public void changedUpdate(DocumentEvent evt) {
      TaskEditorPanel.this.updateTask();
    }
  };

  public void updateTask(Task task) {
    Task oldTask = this.task;
    this.task = task;
    pcs.firePropertyChange(PROP_TASK, oldTask, task);
    updateForm();
  }
  
  private void updateTask() {
    if (noUpdate) {
      return;
    }
    
    task.setName(nameTextField.getText());

    Date due = null;
    try {
      due = DateFormat.getDateInstance().parse(dateTextField.getText());
    } catch (ParseException e) {
      due = new Date();
    }
    task.setDue(due);

    // > Set value only when slider is not moving
    if (!prioritySlider.getValueIsAdjusting()) {
      switch (prioritySlider.getValue()) {
        case 0:
          task.setPrio(Task.Priority.LOW);
          break;
        case 1:
          task.setPrio(Task.Priority.MEDIUM);
          break;
        case 2:
          task.setPrio(Task.Priority.HIGH);
          break;
      }
    }

    task.setProgr(progressSlider.getValue());
    task.setDescr(descriptionTextArea.getText());
  }

  private void updateForm() {
    noUpdate = true;
    
    idTextField.setText(task.getId());
    parentIdTextField.setText(task.getParentId());
    nameTextField.setText(task.getName());
    dateTextField.setText(DateFormat.getDateInstance().format(task.getDue()));

    descriptionTextArea.setText(task.getDescr());

    if (Task.Priority.LOW.equals(task.getPrio())) {
      prioritySlider.setValue(0);
    } else if (Task.Priority.MEDIUM.equals(task.getPrio())) {
      prioritySlider.setValue(1);
    } else {
      prioritySlider.setValue(2);
    }

    progressSlider.setValue(task.getProgr());
    
    noUpdate = false;
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    idTextField = new javax.swing.JTextField();
    parentIdTextField = new javax.swing.JTextField();
    nameTextField = new javax.swing.JTextField();
    dateTextField = new javax.swing.JTextField();
    prioritySlider = new javax.swing.JSlider();
    progressSlider = new javax.swing.JSlider();
    jScrollPane1 = new javax.swing.JScrollPane();
    descriptionTextArea = new javax.swing.JTextArea();
    jButton1 = new javax.swing.JButton();

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.jLabel1.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.jLabel2.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.jLabel3.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.jLabel4.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.jLabel5.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.jLabel6.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.jLabel7.text")); // NOI18N

    idTextField.setEditable(false);
    idTextField.setText(org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.idTextField.text")); // NOI18N
    idTextField.setEnabled(false);

    parentIdTextField.setEditable(false);
    parentIdTextField.setText(org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.parentIdTextField.text")); // NOI18N
    parentIdTextField.setEnabled(false);

    nameTextField.setText(org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.nameTextField.text")); // NOI18N
    nameTextField.getDocument().addDocumentListener(docListener);

    dateTextField.setText(org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.dateTextField.text")); // NOI18N
    dateTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        dateTextFieldActionPerformed(evt);
      }
    });
    dateTextField.getDocument().addDocumentListener(docListener);

    prioritySlider.setMajorTickSpacing(1);
    prioritySlider.setMaximum(2);
    prioritySlider.setPaintLabels(true);
    prioritySlider.setPaintTicks(true);
    prioritySlider.setSnapToTicks(true);
    prioritySlider.setValue(0);
    prioritySlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    prioritySlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        prioritySliderStateChanged(evt);
      }
    });

    progressSlider.setMajorTickSpacing(25);
    progressSlider.setMinorTickSpacing(5);
    progressSlider.setPaintLabels(true);
    progressSlider.setPaintTicks(true);
    progressSlider.setSnapToTicks(true);
    progressSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        progressSliderStateChanged(evt);
      }
    });

    descriptionTextArea.setColumns(20);
    descriptionTextArea.setRows(5);
    descriptionTextArea.getDocument().addDocumentListener(docListener);
    jScrollPane1.setViewportView(descriptionTextArea);

    org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.jButton1.text")); // NOI18N
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jScrollPane1)
              .addComponent(idTextField)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(prioritySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(progressSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
              .addComponent(parentIdTextField)
              .addComponent(nameTextField)
              .addComponent(dateTextField)))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(jButton1)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(parentIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(nameTextField))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel5)
          .addComponent(prioritySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel6)
          .addComponent(progressSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel7)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jButton1)
        .addContainerGap())
    );

    nameTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(TaskEditorPanel.class, "TaskEditorPanel.nameTextField.AccessibleContext.accessibleName")); // NOI18N
  }// </editor-fold>//GEN-END:initComponents

  private void dateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateTextFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_dateTextFieldActionPerformed

  private void prioritySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_prioritySliderStateChanged
    updateTask();
  }//GEN-LAST:event_prioritySliderStateChanged

  private void progressSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_progressSliderStateChanged
    updateTask();
  }//GEN-LAST:event_progressSliderStateChanged

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    Task localTask = taskManager.createTask().getLookup().lookup(Task.class);
    localTask.setName(task.getName());
    localTask.setDue(task.getDue());
//    Task oldTask = task;
//    task = new TaskImpl();
//    pcs.firePropertyChange(PROP_TASK, oldTask, task);
//    updateForm();
  }//GEN-LAST:event_jButton1ActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField dateTextField;
  private javax.swing.JTextArea descriptionTextArea;
  private javax.swing.JTextField idTextField;
  private javax.swing.JButton jButton1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextField nameTextField;
  private javax.swing.JTextField parentIdTextField;
  private javax.swing.JSlider prioritySlider;
  private javax.swing.JSlider progressSlider;
  // End of variables declaration//GEN-END:variables
}
