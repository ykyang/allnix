/*
 * Copyright 2017 Yi-Kun Yang.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netbeansrcp.taskeditor;

import com.netbeansrcp.taskmodel.api.Task;
import com.netbeansrcp.taskmodel.api.TaskManager;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
  dtd = "-//com.netbeansrcp.taskeditor//TaskEditor//EN",
  autostore = false
)
@TopComponent.Description(
  preferredID = "TaskEditorTopComponent",
  //iconBase="SET/PATH/TO/ICON/HERE", 
  persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window",
  id = "com.netbeansrcp.taskeditor.TaskEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
  displayName = "#CTL_TaskEditorAction",
  preferredID = "TaskEditorTopComponent"
)
@Messages({
  "CTL_TaskEditorAction=TaskEditor",
  "CTL_TaskEditorTopComponent=TaskEditor Window",
  "HINT_TaskEditorTopComponent=This is a TaskEditor window"
})
public final class TaskEditorTopComponent extends TopComponent {

  static private Map<Task, TaskEditorTopComponent> tcByTask;
  static TaskManager taskManager;

  static {
    tcByTask = new HashMap<>();
  }

  static public TaskEditorTopComponent findInstance(Task task) {
    TaskEditorTopComponent tc = tcByTask.get(task);
    if (tc == null) {
      tc = new TaskEditorTopComponent(task);
    }
    if (taskManager == null) {
      taskManager = Lookup.getDefault().lookup(TaskManager.class);
      taskManager.addPropertyChangeListener(new ListenForRemovedNodes());
    }

    return tc;
  }

  static private class ListenForRemovedNodes implements PropertyChangeListener {

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
      if (TaskManager.PROP_TASKLIST_REMOVE.equals(evt.getPropertyName())) {
        Task task = (Task) evt.getNewValue();
        TaskEditorTopComponent tc = tcByTask.get(task);
        if (tc != null) {
          tc.close();
          tcByTask.remove(task);
        }
      }
    }
  }

  private InstanceContent ic = new InstanceContent();
  private PropertyChangeListener taskChangeListener = new ListenForTaskChanges();

  public TaskEditorTopComponent() {
//    initComponents();
//    setName(Bundle.CTL_TaskEditorTopComponent());
//    setToolTipText(Bundle.HINT_TaskEditorTopComponent());
//
//    taskEditorPanel1.addPropertyChangeListener(taskChangeListener);
//    
////    associateLookup(Lookups.singleton(taskEditorPanel1.task));
//    ic.add(taskEditorPanel1.task);
//    associateLookup(new AbstractLookup(ic));

    this(Lookup.getDefault().lookup(TaskManager.class));
  }

  public TaskEditorTopComponent(TaskManager taskManager) {
    this((taskManager != null) ? taskManager.createTask().getLookup().lookup(
      Task.class) : null);
  }

  public TaskEditorTopComponent(Task task) {
    initComponents();
    setName(Bundle.CTL_TaskEditorTopComponent());
    setToolTipText(Bundle.HINT_TaskEditorTopComponent());

    taskEditorPanel1.updateTask(task);
    ic.add(taskEditorPanel1.task);
    associateLookup(new AbstractLookup(ic));
    tcByTask.put(task, this);
  }

  public String getTaskId() {
    Task task = taskEditorPanel1.task;
    return (task != null) ? task.getId() : "";
  }

  private class ListenForTaskChanges implements PropertyChangeListener {

    @Override
    public void propertyChange(PropertyChangeEvent event) {
      if (TaskEditorPanel.PROP_TASK.equals(event.getPropertyName())) {
        List<Task> newContent = new ArrayList<>();
        newContent.add(taskEditorPanel1.task);
        TaskEditorTopComponent.this.ic.set(newContent, null);
      }
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    taskEditorPanel1 = new com.netbeansrcp.taskeditor.TaskEditorPanel();

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(taskEditorPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(taskEditorPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private com.netbeansrcp.taskeditor.TaskEditorPanel taskEditorPanel1;
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }
}
