/*
 * Copyright 2017 Yi-Kun Yang.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.netbeansrcp.priorityfilter;

import com.netbeansrcp.overview.OverviewTopComponent;
import com.netbeansrcp.taskmodel.api.Task;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
  dtd = "-//com.netbeansrcp.priorityfilter//PriorityFilter//EN",
  autostore = false
)
@TopComponent.Description(
  preferredID = "PriorityFilterTopComponent",
  //iconBase="SET/PATH/TO/ICON/HERE", 
  persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window",
  id = "com.netbeansrcp.priorityfilter.PriorityFilterTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
  displayName = "#CTL_PriorityFilterAction",
  preferredID = "PriorityFilterTopComponent"
)
@Messages({
  "CTL_PriorityFilterAction=PriorityFilter",
  "CTL_PriorityFilterTopComponent=PriorityFilter Window",
  "HINT_PriorityFilterTopComponent=This is a PriorityFilter window"
})
public final class PriorityFilterTopComponent extends TopComponent {

  public PriorityFilterTopComponent() {
    initComponents();
    setName(Bundle.CTL_PriorityFilterTopComponent());
    setToolTipText(Bundle.HINT_PriorityFilterTopComponent());

  }

  private void filter(Task.Priority priority) {
    OverviewTopComponent tc = (OverviewTopComponent) WindowManager.getDefault().
      findTopComponent("OverviewTopComponent");
    
    ExplorerManager em = tc.getExplorerManager();
    Node root = em.getRootContext();
    
    // > Set the new PriorityFilterNode as the root context
    // > of the ExplorerManager
   
    // > Get a new PriorityFilterNode with the new Priority setting
    if ( root instanceof PriorityFilterNode) {
      PriorityFilterNode pfn = (PriorityFilterNode) root;
      root = pfn.getOriginal();
    }
    
    // > root == TaskNode

    if (priority == null) { 
      // no filtering
      em.setRootContext(root);
    } else {
      // filter with new priority
      em.setRootContext(new PriorityFilterNode(root, priority));
    }
  }
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    lowButton = new javax.swing.JButton();
    mediumButton = new javax.swing.JButton();
    highButton = new javax.swing.JButton();
    resetButton = new javax.swing.JButton();

    org.openide.awt.Mnemonics.setLocalizedText(lowButton, org.openide.util.NbBundle.getMessage(PriorityFilterTopComponent.class, "PriorityFilterTopComponent.lowButton.text")); // NOI18N
    lowButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        lowButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(mediumButton, org.openide.util.NbBundle.getMessage(PriorityFilterTopComponent.class, "PriorityFilterTopComponent.mediumButton.text")); // NOI18N
    mediumButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        mediumButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(highButton, org.openide.util.NbBundle.getMessage(PriorityFilterTopComponent.class, "PriorityFilterTopComponent.highButton.text")); // NOI18N
    highButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        highButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(resetButton, org.openide.util.NbBundle.getMessage(PriorityFilterTopComponent.class, "PriorityFilterTopComponent.resetButton.text")); // NOI18N
    resetButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        resetButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(lowButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(mediumButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(highButton)))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lowButton)
          .addComponent(mediumButton)
          .addComponent(highButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(resetButton)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void lowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowButtonActionPerformed
    filter(Task.Priority.LOW);
  }//GEN-LAST:event_lowButtonActionPerformed

  private void mediumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumButtonActionPerformed
    filter(Task.Priority.MEDIUM);
  }//GEN-LAST:event_mediumButtonActionPerformed

  private void highButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highButtonActionPerformed
    filter(Task.Priority.HIGH);
  }//GEN-LAST:event_highButtonActionPerformed

  private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
    filter(null);
  }//GEN-LAST:event_resetButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton highButton;
  private javax.swing.JButton lowButton;
  private javax.swing.JButton mediumButton;
  private javax.swing.JButton resetButton;
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }
}
