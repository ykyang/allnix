/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeansrcp.tasklog;

import com.netbeansrcp.taskmodel.api.Task;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Enumeration;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
  dtd = "-//org.netbeansrcp.tasklog//TaskLog//EN",
  autostore = false
)
@TopComponent.Description(
  preferredID = "TaskLogTopComponent",
  //iconBase="SET/PATH/TO/ICON/HERE", 
  persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "org.netbeansrcp.tasklog.TaskLogTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
  displayName = "#CTL_TaskLogAction",
  preferredID = "TaskLogTopComponent"
)
@Messages({
  "CTL_TaskLogAction=TaskLog",
  "CTL_TaskLogTopComponent=TaskLog Window",
  "HINT_TaskLogTopComponent=This is a TaskLog window"
})
public final class TaskLogTopComponent extends TopComponent implements 
  PropertyChangeListener, LookupListener {

  private Lookup.Result<Task> result;
  private DefaultListModel<Task> listModel = new DefaultListModel<>();
  
  public TaskLogTopComponent() {
    initComponents();
    setName(Bundle.CTL_TaskLogTopComponent());
    setToolTipText(Bundle.HINT_TaskLogTopComponent());

  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    jList1 = new JList<Task>(listModel);

    jScrollPane1.setViewportView(jList1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JList<Task> jList1;
  private javax.swing.JScrollPane jScrollPane1;
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
//    TopComponent taskEditor = WindowManager.getDefault().findTopComponent("TaskEditorTopComponent");
//    result = taskEditor.getLookup().lookupResult(Task.class);
//    result.addLookupListener(this);
    
//    TaskSource taskSource = Lookup.getDefault().lookup(TaskSource.class);
//    result = taskSource.getLookup().lookupResult(Task.class);
    result = Utilities.actionsGlobalContext().lookupResult(Task.class);
    result.addLookupListener(this);
    
    for (Task task : result.allInstances()) {
      listModel.addElement(task);
      task.addPropertyChangeListener(this);
    }
    
//    taskEditor.addPropertyChangeListener(this);
    
//    Task task = WindowManager.getDefault().findTopComponent("TaskEditorTopComponent").
//      getLookup().lookup(Task.class);
//    listModel.addElement(task);
//    task.addPropertyChangeListener(this);
  }

  @Override
  public void componentClosed() {
    for ( Enumeration<Task> e = listModel.elements(); e.hasMoreElements(); ) {
      e.nextElement().removePropertyChangeListener(this);
    }
    
    result = null;
  }

  @Override
  public void propertyChange(PropertyChangeEvent evt) {
    jList1.repaint();
  }

  @Override
  public void resultChanged(LookupEvent event) {
    Lookup.Result<Task> rslt = (Lookup.Result<Task>) event.getSource();
    for (Task task : rslt.allInstances()) {
      this.listModel.addElement(task);
      task.addPropertyChangeListener(this);
    }
  }
  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }
}
