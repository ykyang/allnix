/*
 * Make sure compile with the same version of Java as MATLAB
 * 
 * Create distribution ZIP file with
 *
 *     ./gradlew distZip
 *
 * or TAR file with
 *
 *     ./gradlew distTar
 *
 * Unzip so jar files can be used from MATLAB
 *
 *     ./gradlew unzip 
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'application'
}

mainClassName = 'org.allnix.hf.HfMain'
group = 'org.allnix.hf'
version = '0.0.1b2'

jar {
    manifest {
        attributes("Manifest-Version": "1.0",
                   "Main-Class": "org.allnix.hf.HfMain",
                   //"Export-Package": "org.allnix.hf"
        )
    }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:23.0'
    
    // LOGGING
    implementation 'org.slf4j:slf4j-api:1.7.13'
  	implementation 'ch.qos.logback:logback-classic:1.1.2'
    
    // JSON
  	implementation 'com.fasterxml.jackson.core:jackson-core:2.7.3'
  	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.7.3'
  	implementation 'com.fasterxml.jackson.core:jackson-databind:2.7.3'


	// JUNIT 5
	testCompile("org.junit.jupiter:junit-jupiter-api:5.0.2")
    testCompile("org.junit.platform:junit-platform-runner:1.0.2")
    testCompile 'org.apiguardian:apiguardian-api:1.0.0'
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.2")
    
    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

task unzip(type: Copy) {
	// buildDir = build/
    def zipFile = file('build/distributions/' + rootProject.name + '-' + version + '.zip')
    def outputDir = file("${buildDir}/distributions/")
 
    from zipTree(zipFile)
    into outputDir
}
